package ir.view;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ActionMap;
import javax.swing.AbstractAction;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.KeyStroke;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.Document;
import javax.swing.text.JTextComponent;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;

import org.apache.lucene.queryparser.classic.ParseException;

import ir.control.SearchHandler;
import ir.control.WebCrawler;
import ir.model.WebPage;

/**
 * Main interface of the GUI, it consists of a tabbed pane with 3 tabs: Search, Settings and About.
 * 
 * Most of the code is for configuring the interface. The functions embodying most of the use for the crawler
 * can be found outside of initComponents(). 
 * 
 * The visual aspects were developed with the help of NetBeans IDE for JSwing. However the code
 * required plenty of changes and adaptations.
 * 
 * @author Gabriel
 */
@SuppressWarnings("serial")
public class CodeSearchUI extends javax.swing.JFrame {
	
	/**List with results from the latest query. It is set at class level, so it can be accessed by different elements*/
	List<WebPage> resultsFromLatestQuery = new ArrayList<WebPage> ();
	
	/**Flag indicating if the user has been notified before crawling with depths>5*/
	boolean noNotificationForLargeDepthValues=true;
	
	/**UndoManager for the query text area*/
	private UndoManager undoManagerQuery;
	
	/**UndoManager for the seeds text area*/
	private UndoManager undoManagerSeeds;

    /**
     * Creates new form CodeSearchUI
     */
    public CodeSearchUI() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CodeSearchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CodeSearchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CodeSearchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CodeSearchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {    	
    	/**We call the constructors of all the components...*/
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        searchPanel = new javax.swing.JPanel();
        searchButton = new javax.swing.JButton();
        query = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        resultsTextArea = new toolTippedTextPane();
        resultsLabel = new javax.swing.JLabel();
        settingsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        seedsTextArea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        getListOfVisitedURLsButton = new javax.swing.JButton();
        getListOfExcludedURLsButton = new javax.swing.JButton();
        crawlButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        selectAnotherIndexButton = new javax.swing.JButton();
        useDefaultIndexButton = new javax.swing.JButton();
        currentIndexLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        headerPanel = new javax.swing.JPanel();
        logo = new javax.swing.JLabel();
        aboutPanel = new javax.swing.JPanel();
        resetIndexWhenCrawlingCheckbox = new javax.swing.JCheckBox();
        undoManagerQuery= new UndoManager();
        undoManagerSeeds= new UndoManager();
        
        /**Now we start the configuration*/

        //General configuration
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);//Closing ends the program.
    	this.setTitle("Code Insights");
        this.getRootPane().setDefaultButton(searchButton);//<-Not entirely useful.

        //Setting up of action listeners
    	searchButton.setText("Search");
        searchButton.setRequestFocusEnabled(false);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonAction(evt);
            }
        });

        getListOfVisitedURLsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getListOfVisitedURLsAction(evt);
            }
        });

        getListOfExcludedURLsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getListOfExcludedURLsAction(evt);
            }
        });

        useDefaultIndexButton.setText("Use default index");
        useDefaultIndexButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDefaultIndex(evt);
            }
        });
       
        selectAnotherIndexButton.setText("Select another index");
        selectAnotherIndexButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAnotherIndex(evt);
            }
        });
        
        resetIndexWhenCrawlingCheckbox.setText("Reset index while crawling");
        resetIndexWhenCrawlingCheckbox.addActionListener(new java.awt.event.ActionListener() {//<-Unused
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });


        crawlButton.setText("Submit");
        crawlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					crawlButtonAction(evt);
				} catch (java.text.ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        
        //Configuration for elements in Search tab
        resultsTextArea.setEditable(false);
    	resultsTextArea.setCaretPosition(0);
    	((DefaultCaret) resultsTextArea.getCaret()).setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        HTMLEditorKit kit = new HTMLEditorKit();
        resultsTextArea.setEditorKit(kit);
        resultsTextArea.setDocument(kit.createDefaultDocument());
        resultsTextArea.setContentType("text/html");
        resultsTextArea.setText("No results so far.");
        jScrollPane4.setViewportView(resultsTextArea);
        resultsLabel.setText("Results | Index used: Default");
        
        resultsTextArea.setComponentPopupMenu(null);
        
        
        resultsTextArea.addMouseListener(new MouseAdapter() {  //Allowing to copy text...
                        public void mouseReleased(final MouseEvent e) { 
                            if (e.isPopupTrigger() || (e.getModifiers() & InputEvent.BUTTON3_MASK) == InputEvent.BUTTON3_MASK
                            	){  
                            	final JTextComponent component = (JTextComponent)e.getComponent(); 
                                final JPopupMenu menu = new JPopupMenu();  
                                JMenuItem item;  
                                item = new JMenuItem(new DefaultEditorKit.CopyAction());  
                                item.setText("Copy text...");  
                                item.setEnabled(component.getSelectionStart() != component.getSelectionEnd());  
                                menu.add(item);  
                                menu.show(e.getComponent(), e.getX(), e.getY());  
                            }  
                        }                        
                    });  
        
        resultsTextArea.addHyperlinkListener(new HyperlinkListener(){//Allowing to open a browser by clicking in the url
        	      public void hyperlinkUpdate(HyperlinkEvent e) {
        	        if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
        	            try {
        	                Desktop.getDesktop().browse(e.getURL().toURI());
        	            } catch (IOException | URISyntaxException e1) {
        	                e1.printStackTrace();
        	            }
        	        }
        	      }
        });      
        
        resultsTextArea.setToolTipText("");
        
        query.addMouseListener(new MouseAdapter() {  //Allowing to cut, copy and paste text...
            public void mouseReleased(final MouseEvent e) { 
                if (e.isPopupTrigger() || (e.getModifiers() & InputEvent.BUTTON3_MASK) == InputEvent.BUTTON3_MASK
                		){  
                    final JPopupMenu menu = new JPopupMenu();  
                    JMenuItem item;  
                   	final JTextComponent component = (JTextComponent)e.getComponent(); 
                    item = new JMenuItem(new DefaultEditorKit.CopyAction());  
                    item.setText("Copy");  
                    item.setEnabled(component.getSelectionStart() != component.getSelectionEnd());  
                    menu.add(item);  
                    item = new JMenuItem(new DefaultEditorKit.CutAction());  
                    item.setText("Cut");  
                    item.setEnabled(component.isEditable() && component.getSelectionStart() != component.getSelectionEnd());  
                    menu.add(item);  
                    item = new JMenuItem(new DefaultEditorKit.PasteAction());  
                    item.setText("Paste");  
                    item.setEnabled(component.isEditable());  
                    menu.add(item);  
                    menu.show(e.getComponent(), e.getX(), e.getY()); 
                }  
            }  
        });
        /**Adding undo and redo to query*/
        Document queryAsDoc= query.getDocument();
        queryAsDoc.addUndoableEditListener(new UndoableEditListener() {
            @Override
            public void undoableEditHappened(UndoableEditEvent e) {
                undoManagerQuery.addEdit(e.getEdit());

            }
        });
        InputMap im = query.getInputMap(JComponent.WHEN_FOCUSED);
        ActionMap am = query.getActionMap();

        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_Z, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()), "Undo");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_Y, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()), "Redo");

        am.put("Undo", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    if (undoManagerQuery.canUndo()) {
                        undoManagerQuery.undo();
                    }
                } catch (CannotUndoException exp) {
                    exp.printStackTrace();
                }
            }
        });
        am.put("Redo", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    if (undoManagerQuery.canRedo()) {
                        undoManagerQuery.redo();
                    }
                } catch (CannotUndoException exp) {
                    exp.printStackTrace();
                }
            }
        });

        /**Layout configuration for Search tab*/
        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 623, Short.MAX_VALUE)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addComponent(query)
                        .addGap(12, 12, 12)
                        .addComponent(searchButton))
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addComponent(resultsLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(query, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Search", searchPanel);

        //Configuration for elements on Settings tab
        seedsTextArea.setColumns(20);
        seedsTextArea.setRows(5);
        seedsTextArea.setText("http://stackoverflow.com/\nhttps://code.google.com/\nhttps://github.com\nhttp://sourceforge.net\nhttps://bitbucket.org\nhttps://www.codeplex.com/\nhttps://fedoraproject.org/\nhttps://www.codemy.net\n\n\n");
        jScrollPane1.setViewportView(seedsTextArea);
        seedsTextArea.addMouseListener(new MouseAdapter() { //Allowing to cut, copy and paste text...
            public void mouseReleased(final MouseEvent e) { 
                if (e.isPopupTrigger() || (e.getModifiers() & InputEvent.BUTTON3_MASK) == InputEvent.BUTTON3_MASK
                		){  
                    final JPopupMenu menu = new JPopupMenu();
                    final JTextComponent component = (JTextComponent)e.getComponent(); 
                    JMenuItem item;  
                    item = new JMenuItem(new DefaultEditorKit.CopyAction());  
                    item.setText("Copy");  
                    item.setEnabled(component.getSelectionStart() != component.getSelectionEnd());  
                    menu.add(item);  
                    item = new JMenuItem(new DefaultEditorKit.CutAction());  
                    item.setText("Cut");  
                    item.setEnabled(component.isEditable() && component.getSelectionStart() != component.getSelectionEnd());  
                    menu.add(item);  
                    item = new JMenuItem(new DefaultEditorKit.PasteAction());  
                    item.setText("Paste");  
                    item.setEnabled(component.isEditable());  
                    menu.add(item);  
                    menu.show(e.getComponent(), e.getX(), e.getY()); 
                }  
            }  
        }); 
        Document seedsAsDoc= seedsTextArea.getDocument();
        seedsAsDoc.addUndoableEditListener(new UndoableEditListener() {
            @Override
            public void undoableEditHappened(UndoableEditEvent e) {
                undoManagerSeeds.addEdit(e.getEdit());
            }
        });
        InputMap imSeeds = seedsTextArea.getInputMap(JComponent.WHEN_FOCUSED);
        ActionMap amSeeds = seedsTextArea.getActionMap();

        imSeeds.put(KeyStroke.getKeyStroke(KeyEvent.VK_Z, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()), "Undo");
        imSeeds.put(KeyStroke.getKeyStroke(KeyEvent.VK_Y, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()), "Redo");

        amSeeds.put("Undo", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    if (undoManagerSeeds.canUndo()) {
                        undoManagerSeeds.undo();
                    }
                } catch (CannotUndoException exp) {
                    exp.printStackTrace();
                }
            }
        });
        amSeeds.put("Redo", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    if (undoManagerSeeds.canRedo()) {
                        undoManagerSeeds.redo();
                    }
                } catch (CannotUndoException exp) {
                    exp.printStackTrace();
                }
            }
        });

        getListOfVisitedURLsButton.setText("See list of visited pages");

        getListOfExcludedURLsButton.setText("See list of excluded pages");

        jLabel3.setText("Add a list of URLs to the index:");

        jLabel4.setText("Type a list of valid URLs, one per line, no separators.");

        currentIndexLabel.setText("Index used: Default");

        jLabel7.setText("Crawling depth: ");

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));

        
        /**Layout configuration for Settings tab*/
     
        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                        .addComponent(resetIndexWhenCrawlingCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(crawlButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                        .addComponent(useDefaultIndexButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(selectAnotherIndexButton))
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addComponent(getListOfVisitedURLsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(getListOfExcludedURLsButton))
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(currentIndexLabel)
                            .addComponent(jLabel3))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 124, Short.MAX_VALUE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(currentIndexLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectAnotherIndexButton)
                    .addComponent(useDefaultIndexButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getListOfVisitedURLsButton)
                    .addComponent(getListOfExcludedURLsButton))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(crawlButton)
                    .addComponent(resetIndexWhenCrawlingCheckbox))
                .addContainerGap())
        );
      
        jTabbedPane1.addChangeListener(new TabListener());
        jTabbedPane1.addTab("Settings", settingsPanel);
        
        //Configuration for elements of About tab
        jTabbedPane1.addTab("About", aboutPanel);
        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setText("Developed by:\nGabriel Campero gabrielcampero@acm.org\nDominik Lang dominik.lang@st.ovgu.de\nRene Tatua renetatua@gmail.com\nJohannes Teschner johannes.teschner@st.ovgu.de\n\nSubmission for Master's assignment: Information Retrieval\nProf. Dr. Andreas Nürnberger\nM.Sc. Tatiana Gossen\nWinter Semester 2014/2015\n\nFakultät für Informatik, Otto-von-Güericke Universität\n");
        jTextArea2.addMouseListener(new MouseAdapter() {  //Allowing to copy text...
            public void mouseReleased(final MouseEvent e) { 
                if (e.isPopupTrigger() || (e.getModifiers() & InputEvent.BUTTON3_MASK) == InputEvent.BUTTON3_MASK
                	){  
                	final JTextComponent component = (JTextComponent)e.getComponent(); 
                    final JPopupMenu menu = new JPopupMenu();  
                    JMenuItem item;  
                    item = new JMenuItem(new DefaultEditorKit.CopyAction());  
                    item.setText("Copy");  
                    item.setEnabled(component.getSelectionStart() != component.getSelectionEnd());  
                    menu.add(item);  
                    menu.show(e.getComponent(), e.getX(), e.getY());  
                }  
            }  
        }); 
        jScrollPane3.setViewportView(jTextArea2);

        /**Layout configuration for About tab*/
        javax.swing.GroupLayout aboutPanelLayout = new javax.swing.GroupLayout(aboutPanel);
        aboutPanel.setLayout(aboutPanelLayout);
        aboutPanelLayout.setHorizontalGroup(
            aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 623, Short.MAX_VALUE)
                .addContainerGap())
        );
        aboutPanelLayout.setVerticalGroup(
            aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        

        //Configuration for header section
        headerPanel.setBackground(java.awt.Color.white);
        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ir/view/images/CodeInsightsLogo.png"))); // NOI18N

        /**Layout configuration for header section*/
        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addComponent(logo)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        /**Layout configuration for entire window*/
        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addComponent(headerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        
  

    /**Search button*/
    private void searchButtonAction(java.awt.event.ActionEvent evt) { 
    	
    	if (query.getText().length()>1){
    		resultsTextArea.setText("Searching...");
    		resultsTextArea.repaint(1);
    		
    		searchButton.setEnabled(false);
    		
    		 /**Here we create an additional thread that will start the search.
             * This is done so the user has a temporary message saying that the search is being
             * done.  
             * If we didn't do that, then we would only get to see this messages after the execution.
             * 
             */
    		String queryStr= query.getText();
            ThreadForSearching newThreadForSearching = new ThreadForSearching(queryStr); 
            Thread t = new Thread(newThreadForSearching);
            t.start();
    	}
    }                                        

    /**Select default index*/
    private void selectDefaultIndex(java.awt.event.ActionEvent evt) {                                         
        WebCrawler.getInstance().setNewIndex("DEFAULT"); //We set the new index
        /**Updating the current index label*/
        if (WebCrawler.getInstance().getUsingNonDefaultIndex()){
         	 currentIndexLabel.setText("Index used: "+WebCrawler.getInstance().getCurrentIndex());
             resultsLabel.setText("Results | Index used: "+WebCrawler.getInstance().getCurrentIndex());
       }
       else{
            currentIndexLabel.setText("Index used: Default");
            resultsLabel.setText("Results | Index used: Default");
       }
    }                                        

    /**Select another index*/
    private void selectAnotherIndex(java.awt.event.ActionEvent evt) {                                         
    	javax.swing.JFileChooser jFileChooser1 = new javax.swing.JFileChooser(){
    		public void approveSelection(){
        		super.approveSelection();
            	WebCrawler.getInstance().setNewIndex(getSelectedFile().getPath());//Function to set the new index.
        	}
        };
        
        jFileChooser1.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
    	jFileChooser1.showOpenDialog(this); //Now we show the file chooser
    	
    	/**Updating the current index label*/
        if (WebCrawler.getInstance().getUsingNonDefaultIndex()){
          	 currentIndexLabel.setText("Index used: "+WebCrawler.getInstance().getCurrentIndex());
             resultsLabel.setText("Results | Index used: "+WebCrawler.getInstance().getCurrentIndex());
        }
        else{
             currentIndexLabel.setText("Index used: Default");
             resultsLabel.setText("Results | Index used: Default");
        }
    }
    
    /**Get list of visited urls*/
    private void getListOfVisitedURLsAction(java.awt.event.ActionEvent evt) {
    	/**We get the list of visited urls from the crawler, and pass them on to the ListOfUnformattedTextDialog*/
    	final List<String> visited = new ArrayList<String>();
    	visited.addAll(WebCrawler.getInstance().getVisitedPages(WebCrawler.getInstance().getCurrentIndex()));
    	if(visited.isEmpty()){
    		visited.add("No visited pages.");
    	}
    	final CodeSearchUI ref = this;
    	java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListOfUnformattedTextDialog(ref, false, visited, "Visited pages").setVisible(true); 
            }
        });
    }                                        
    
    /**Get list of excluded urls*/
    private void getListOfExcludedURLsAction(java.awt.event.ActionEvent evt) {   
    	/**We get the list of excluded urls from the crawler, and pass them on to the ListOfUnformattedTextDialog*/
    	final List<String> excluded = new ArrayList<String>();
    	excluded.addAll(WebCrawler.getInstance().getExcludedPages(WebCrawler.getInstance().getCurrentIndex()));
    	if(excluded.isEmpty()){
    		excluded.add("No excluded pages.");
    	}
    	final CodeSearchUI ref = this;
    	java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListOfUnformattedTextDialog(ref, false, excluded, "Excluded pages").setVisible(true);
            }
        });
    }                                        
    
    /**Functionality for the crawl button */
    private void crawlButtonAction(java.awt.event.ActionEvent evt) throws java.text.ParseException {                                         
        List<URL> newSeeds = new ArrayList<URL>();
        String seedsAsOneString= seedsTextArea.getText();
        if (seedsAsOneString.length()>8){
        	String seedsArray[] = seedsAsOneString.split("\n");
        	for (int i=0; i<seedsArray.length; i++){
        		try {
        			newSeeds.add(new URL (seedsArray[i]));
        		} catch (MalformedURLException e) {
        			// TODO Auto-generated catch block
        			e.printStackTrace();
        		}
        	}
        
        	boolean createIndexOrig= false;
        	if (resetIndexWhenCrawlingCheckbox.isSelected()){
        		createIndexOrig=true;
        	}
        	
        	jSpinner1.commitEdit();
        	
            //We copy the temporal variables as final, for use in a new interface.
        	final CodeSearchUI ref = this;
        	final int newDepth= (Integer)jSpinner1.getValue();
            final boolean createIndex=createIndexOrig;
            final List<URL> seeds = new ArrayList<URL>();
            seeds.addAll(newSeeds);

     	   
           if (newDepth>5 & noNotificationForLargeDepthValues){
        	   	noNotificationForLargeDepthValues=false;
        	   	JOptionPane optionPane = new JOptionPane();
                optionPane.setMessage("Crawling with a depth over 5 can be very time-consuming.\nPlease check once more if your request is correct.");
                optionPane.setMessageType(JOptionPane.INFORMATION_MESSAGE);
                JDialog dialog = optionPane.createDialog(null, "Message");
                dialog.setVisible(true);
           } 
           else{
        	   	   noNotificationForLargeDepthValues=true;
 	               java.awt.EventQueue.invokeLater(new Runnable() {
 	                  public void run() {
 	               	   /**The crawling will be called in this new interface, which also handle the temporary output
 	               	   and status messages from the crawling.
 	               	   Note, this interface will block the current one until it is closed*/
 	                     new ListOfUnformattedTextDialog(ref, true, seeds, newDepth, WebCrawler.getInstance().getCurrentIndex(), createIndex).setVisible(true);
 	                  }
 	                });
        	
           }

        }
    }                                        


    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          
    
  
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CodeSearchUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton getListOfVisitedURLsButton;
    private javax.swing.JButton getListOfExcludedURLsButton;
    private javax.swing.JButton crawlButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton selectAnotherIndexButton;
    private javax.swing.JButton useDefaultIndexButton;
    private javax.swing.JCheckBox resetIndexWhenCrawlingCheckbox;
    private javax.swing.JLabel logo;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel resultsLabel;
    private javax.swing.JLabel currentIndexLabel;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JPanel aboutPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea seedsTextArea;
    private javax.swing.JTextArea jTextArea2;
    private toolTippedTextPane resultsTextArea;
    private javax.swing.JTextField query;
  
    // End of variables declaration                   
    
    //An extra nested class had to be declared to be able to set default buttons on each tab. 
    class TabListener implements ChangeListener {
        public void stateChanged(ChangeEvent e) {
            javax.swing.JTabbedPane source = (javax.swing.JTabbedPane)e.getSource();
            if(source.getSelectedIndex()==0){
            	source.getRootPane().setDefaultButton(searchButton);   //Search by default in this tab
            }
            else{
            	source.getRootPane().setDefaultButton(useDefaultIndexButton);//Select another index by default in this tab
            }
        }
   }
    
  //An extra nested class so we can override the getToolTipText from JTextPane. 
    class toolTippedTextPane extends javax.swing.JTextPane {
        public String getToolTipText(MouseEvent e) {//Here we get the code snippets to show
        	if(getCursor().getType()==Cursor.HAND_CURSOR){
        		int pos= viewToModel(e.getPoint());
        		String text=null;
				try {
					text = this.getDocument().getText(0, this.getDocument().getLength());
				} catch (BadLocationException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				/**First we figure the location of each result so the appropriate snippet can be shown*/
        		int pagePos[]= new int [10];
        		int topResult=resultsFromLatestQuery.get(0).getNumOfResults();
        		if (topResult>=10){
        			topResult=10;
            		pagePos[0]=text.indexOf("- Rank: 1", 0);
              		pagePos[1]=text.lastIndexOf("- Rank: 2");
              		pagePos[2]=text.lastIndexOf("- Rank: 3");
              		pagePos[3]=text.lastIndexOf("- Rank: 4");
              		pagePos[4]=text.lastIndexOf("- Rank: 5");
              		pagePos[5]=text.lastIndexOf("- Rank: 6");
              		pagePos[6]=text.lastIndexOf("- Rank: 7");
              		pagePos[7]=text.lastIndexOf("- Rank: 8");
              		pagePos[8]=text.lastIndexOf("- Rank: 9");
              		pagePos[9]=text.lastIndexOf("- Rank: 10");

        		}
        		else{
        			for (int j=0; j<topResult; j++){
        				if(j==0){
        					pagePos[j]=text.indexOf("- Rank: "+(j+1), 0);
        				}
        				else{
        					pagePos[j]=text.lastIndexOf("- Rank: "+(j+1));
        				}
        			}
        		}
          		int pageSelected=0;
          		int i=0;
          		while (i<topResult-1){
          			if (pagePos[i]<pos && pagePos[i+1]>pos){
          				pageSelected=i;
          				i=15;
          			}
          			i=i+1;
          		}
          		if (i<15){
          			pageSelected=topResult-1;
          		}
        	    String output="Code snippets: "+resultsFromLatestQuery.get(pageSelected).getSnippets();
    			if(output.length()>16){
    				if (output.length()<=160){
    					return output;
    				}
    				return output.substring(0, 160)+"...";
    			}
    			else {
    				return "No available code snippet for this document.";
    			}
			}
        	return null;
        }
   }
    
    private class ThreadForSearching implements Runnable {//Additional thread in charge of searching
    	String queryStr;

        public ThreadForSearching(String queryStr) {
        	this.queryStr=queryStr;
        }

        public void run() {
        	resultsFromLatestQuery.clear();
    		String currentIndex=WebCrawler.getInstance().getCurrentIndex();//We ask the crawler for the current index.
    		SearchHandler handler = new SearchHandler(currentIndex);
    		try {
				resultsFromLatestQuery.addAll(handler.searchIndex(queryStr));//We ask the handler to search over the index and store the results.
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    		if(resultsFromLatestQuery.isEmpty()){
    			resultsTextArea.setText("No results found.");
    		}
    		else{
    			String output="";
    			output="Number of results: "+resultsFromLatestQuery.get(0).getNumOfResults()+".";
    			if (resultsFromLatestQuery.get(0).getNumOfResults()>10){
    				output+="<br>Displaying top 10 results.";
    			}
    			output+="<br>----------------------------------------------------------<br>";
    			for (int i = 0; i < resultsFromLatestQuery.size(); i++) {
    				output+="- "
    						+ " Rank: " + resultsFromLatestQuery.get(i).getRank() +"<br>" 
    						+ " Title: " +resultsFromLatestQuery.get(i).getTitle(); 
    						
    				
    				/**Formatting for URLs*/
    				String tentativeURL=resultsFromLatestQuery.get(i).getUrl(); 
    				if (tentativeURL.contains("http")){
    					tentativeURL="<a href=\""+tentativeURL+"\">"+tentativeURL+"</a>";
    				}
    				
    				output+= "<br> Path: " + tentativeURL 
    						+ "<br> Summary: <i>\"" + resultsFromLatestQuery.get(i).getSummary().replace("<script type=\""+"text/javascript"+"\">", "")
    						+ " \"</i><br> Scoring for the document: " + resultsFromLatestQuery.get(i).getRelevanceScore();
    				output+="<br>----------------------------------------------------------<br>";
    			}
    			resultsTextArea.setText(output);
    	    	resultsTextArea.setCaretPosition(0);
    		}
    		searchButton.setEnabled(true);
        }
    }
}
